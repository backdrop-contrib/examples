<?php
/**
 * @file
 * Outlines how a module can use the Cache API.
 *
 * @todo: Demonstrate cache expiration.
 */

/**
 * @defgroup cache_example Example: Cache API
 * @ingroup examples
 * @{
 * Outlines how a module can use the Cache API.
 *
 * Cache API allows us to cache data that is heavy to calculate. As this can
 * significantly speed up the Backdrop site, it is recommended to use cache
 * mechanism when it is appropriate.
 *
 * Cache in Backdrop is very easy to use. This example will search entire Backdrop
 * folder and display all files. Since this operation includes filesystem it can
 * take a while. This list will not change much on production
 * websites, so we decide to cache it.
 *
 * @see cache()
 * @see cache_get()
 * @see cache_set()
 * @see cache_clear_all()
 */

/**
 * Implements hook_menu().
 */
function cache_example_menu() {
  $items = array();
  $items['examples/cache_example'] = array(
    'title' => 'Cache example',
    'description' => 'Example of Backdrop Cache API',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('cache_example_page_form'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Main page for cache_example.
 *
 * Displays a page/form which outlines how Backdrop's cache works.
 */
function cache_example_page_form($form, &$form_state) {
  // Log execution time.
  $start_time = microtime(TRUE);

  // Cache operations implement the cache() function.
  //
  // Try to load the files count from cache. This function will accept one
  // argument:
  // - cache bin cache bin (most often a database table) where the object is to
  //   be saved.
  //
  // The Cache::get() method accepts the cache object name (cid) as its argument
  // and returns the cached object or FALSE if object does not exist.
  //
  // The shortcut function cache_get(), as in:
  // $cache = cache_get('cache_example_files_count', 'cache');
  // may alternatively be used.
  if ($cache = cache('cache')->get('cache_example_files_count')) {
    /*
     * Get cached data. Complex data types will be unserialized automatically.
     */
    $files_count = $cache->data;
  }
  else {
    // If there was no cached data available we have to search filesystem.
    // Recursively get all files from Backdrop's folder.
    $files_count = count(file_scan_directory('.', '/.*/'));

    // Since we have recalculated, we now need to store the new data into cache.
    // Complex data types will be automatically serialized before being saved
    // into cache.
    // Here we use the default setting and create an unexpiring cache item.
    // See below for an example that creates an expiring cache item.
    // Alternative syntax: cache_set('cache_example_files_count', $files_count);
    cache('cache')->set('cache_example_files_count', $files_count);
  }

  $end_time = microtime(TRUE);
  $duration = $end_time - $start_time;

  // Format intro message.
  $intro_message = '<p>' . t('This example will search the entire Backdrop folder and display a count of the files in it.') . ' ';
  $intro_message .= t('This can take a while, since there are a lot of files to be searched.') . ' ';
  $intro_message .= t('We will search filesystem just once and save output to the cache. We will use cached data for later requests.') . '</p>';
  $intro_message .= '<p>' . t('<a href="@url">Reload this page</a> to see cache in action.', array('@url' => request_uri())) . ' ';
  $intro_message .= t('You can use the button below to remove cached data.') . '</p>';

  $form['file_search'] = array(
    '#type' => 'fieldset',
    '#title' => t('File search caching'),
  );

  $form['file_search']['introduction'] = array(
    '#markup' => $intro_message,
  );

  $color = empty($cache) ? 'red' : 'green';
  $retrieval = empty($cache) ? t('calculated by traversing the filesystem') : t('retrieved from cache');

  $form['file_search']['statistics'] = array(
    '#type' => 'item',
    '#markup' => t('%count files exist in this Backdrop installation; @retrieval in @time ms. <br/>(Source: <span style="color:@color;">@source</span>)',
      array(
        '%count' => $files_count,
        '@retrieval' => $retrieval,
        '@time' => number_format($duration * 1000, 2),
        '@color' => $color,
        '@source' => empty($cache) ? t('actual file search') : t('cached'),
      )
    ),
  );

  $form['file_search']['remove_file_count'] = array(
    '#type' => 'submit',
    '#submit' => array('cache_example_form_expire_files'),
    '#value' => t('Explicitly remove cached file count'),
  );

  $form['expiration_demo'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cache expiration settings'),
  );

  $form['expiration_demo']['explanation'] = array(
    '#markup' => t('A cache item can be set as CACHE_PERMANENT, meaning that it will only be removed when explicitly cleared, or it can have an expiration time (a Unix timestamp).'),
  );

  $expiring_item = cache('cache')->get('cache_example_expiring_item');
  $item_status = $expiring_item ?
      t('Cache item exists and is set to expire at %time', array('%time' => $expiring_item->data)) :
      t('Cache item does not exist');
  $form['expiration_demo']['current_status'] = array(
    '#type' => 'item',
    '#title' => t('Current status of cache item "cache_example_expiring_item"'),
    '#markup' => $item_status,
  );

  $form['expiration_demo']['expiration'] = array(
    '#type' => 'select',
    '#title' => t('Time before cache expiration'),
    '#options' => array(
      'never_remove' => t('CACHE_PERMANENT'),
      -10 => t('Immediate expiration'),
      10 => t('10 seconds from form submission'),
      60 => t('1 minute from form submission'),
      300 => t('5 minutes from form submission'),
    ),
    '#default_value' => -10,
    '#description' => t('Any cache item can be set to only expire when explicitly cleared, or to expire at a given time.'),
  );

  $form['expiration_demo']['create_cache_item'] = array(
    '#type' => 'submit',
    '#value' => t('Create a cache item with this expiration'),
    '#submit' => array('cache_example_form_create_expiring_item'),
  );

  $form['cache_clearing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Expire and remove options'),
    '#description' => t("We have APIs to expire cached items and also to just remove them."),
  );

  $form['cache_clearing']['cache_clear_type'] = array(
    '#type' => 'radios',
    '#title' => t('Type of cache clearing to do'),
    '#options' => array(
      'expire' => t('Remove items from the "cache" bin that have expired'),
      'remove_all' => t('Remove all items from the "cache" bin regardless of expiration'),
      'remove_wildcard' => t('Remove all items from the "cache" bin that match the pattern "cache_example"'),
    ),
    '#default_value' => 'expire',
  );

  // Submit button to clear cached data.
  $form['cache_clearing']['clear_expired'] = array(
    '#type' => 'submit',
    '#value' => t('Clear or expire cache'),
    '#submit' => array('cache_example_form_cache_clearing'),
    '#access' => user_access('administer site configuration'),
  );

  return $form;
}

/**
 * Submit handler that explicitly clears cache_example_files_count from cache.
 */
function cache_example_form_expire_files($form, &$form_state) {
  // Clear cached data. This will delete the cached object from cache bin.
  //
  // Alternatives to this implementation are:
  // - use the shortcut: cache_clear_all('cache_example_files_count', 'cache');
  // - use deleteMultiple(), which is of course most useful if providing
  //   multiple cache IDs: cache('cache')->deleteMultiple(array('cache_example_files_count'));
  cache('cache')->delete('cache_example_files_count');

  // Display message to the user.
  backdrop_set_message(t('Cached data key "cache_example_files_count" was cleared.'), 'status');
}

/**
 * Submit handler to create a new cache item with specified expiration.
 */
function cache_example_form_create_expiring_item($form, &$form_state) {
  $interval = $form_state['values']['expiration'];
  if ($interval == 'never_remove') {
    $expiration = CACHE_PERMANENT;
    $expiration_friendly = t('Never expires');
  }
  else {
    $expiration = time() + $interval;
    $expiration_friendly = format_date($expiration);
  }
  // Set the expiration to the actual Unix timestamp of the end of the required
  // interval.
  // An alternative syntax is to use the shortcut: cache_set('cache_example_expiring_item', $expiration_friendly, 'cache', $expiration);
  cache('cache')->set('cache_example_expiring_item', $expiration_friendly, $expiration);
  backdrop_set_message(t('cache_example_expiring_item was set to expire at %time', array('%time' => $expiration_friendly)));
}

/**
 * Submit handler to demonstrate the various methods for clearing cache.
 */
function cache_example_form_cache_clearing($form, &$form_state) {
  switch ($form_state['values']['cache_clear_type']) {
    case 'expire':
      // Here we'll remove all cache keys in the 'cache' bin that have expired.
      // An alternative syntax is to use the shortcut: cache_clear_all(NULL, 'cache', NULL);
      cache('cache')->garbageCollection();
      backdrop_set_message(t('Expired cache items were removed.'));
      break;

    case 'remove_all':
      // This removes all keys in a bin. This has nothing to do with expiration.
      // It's just brute-force removal.
      // An alternative syntax is to use the shortcut: cache_flush('cache');
      cache('cache')->flush();
      backdrop_set_message(t('ALL entries in the "cache" bin were removed.'));
      break;

    case 'remove_wildcard':
      // We can also explicitly remove all cache items whose cid begins with
      // 'cache_example' by using a wildcard. This again is brute-force
      // removal, not expiration.
      // An alternative syntax is to use the shortcut: cache_clear_all('cache_example', 'cache', TRUE);
      cache('cache')->deletePrefix('cache_example');
      backdrop_set_message(t('Cache entries whose cid began with "cache_example" in the "cache" bin were removed.'));
      break;
  }
}

/**
 * @} End of "defgroup cache_example".
 */
